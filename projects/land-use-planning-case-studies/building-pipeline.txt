# this is probabilistic data, so the input is a CSV where each row is a hazard .tif
# Turn this into a lookup table, so we can easily get the .tif for a given SLR and ARI
input($hazard_maps, name: 'event') as hazard_input
 ->
group(select: {
        to_lookup_table(key: { event.SLR, event.Return_Period }, value: event, options: { unique: true }) as event_table
      })
 ->
join_exposures_and_events.rhs

# Add in climate change projections separately (this has the projected year that SLR takes effect)
input($cc_projection)
 ->
select({ *, int(year) as Year, float($projected_SLR) as SLR })
 ->
# convert SLR from metres to cm so we're working in consistent units
select({ *, round(SLR * 100) as SLR })
 ->
# we are only interested in one particular SLR scenario, and only the
# projections up until the year we are modelling, e.g. 2120
filter(scenario = $scenario and Year <= $max_year) as selected_years
 ->
group(select: {
        to_lookup_table(key: Year, value: SLR, options: { unique: true }) as SLR_table
      })
 ->
join_cc_projections.rhs

# these are the years we're interested in seeing the results for
input(value: { $years as Year })
 ->
unnest(Year)
 ->
join_years_of_interest.rhs

input($future_buildings, name: 'exposure') as input_future_buildings
 ->
# check in this future building falls in an area marked as no development/intensification or retreat
select({
         *,
         sample_one(exposure, to_coverage(bookmark($no_intensification))) as no_intensification,
         sample_one(exposure, to_coverage(bookmark($retreat))) as retreat,
       })
 ->
select({
         *,
         # use percent=0 here if we don't want to develop, so no Construction_Year will be assigned
         # and the building won't be built
         if_then_else(is_null(no_intensification) and is_null(retreat),
                      float($percent_future_buildings),
                      0.0) as percent_future_buildings
       })
 ->
# randomly assign a year that this building will be constructed (if at all)
select({
         {
           exposure.*,
           assign_construction_year($random_seed, $max_year, percent_future_buildings) as Construction_Year,
           # assume new builds won't be replaced at all
           maxint() as Replacement_Year
         } as exposure
       }) as future_buildings
 ->
group( { to_coverage(exposure) as future_building_coverage })
 ->
join_future_buildings.rhs

# combine the current and future building datasets into one layer
future_buildings -> select({*}) -> possible_building_combinations

input($current_buildings, name: 'exposure') as input_buildings
 ->
join(on: true) as join_future_buildings
 ->
# work out when the current building will be replaced (if at all).
# (As the future building footprints may have a different layout to the current buildings,
# we use all-intersections sampling here to guarantee no overlaps)
select({ *, sample(exposure, future_building_coverage) as replacements }) as sample_future_buildings
 ->
select({ *, min(map(replacements, h -> h.sampled.Construction_Year)) as replacement_year })
 ->
# retreat trumps new development - we need to remove any buildings that fall inside the 'retreat' polygons
select({*, is_not_null(sample_one(exposure, to_coverage(bookmark($retreat)))) as Retreat })
 ->
# assign a retreat year using the same logic we assign construction years
select({
         *,
         if_then_else(Retreat,
                      assign_construction_year($random_seed, $retreat_by, 100),
                      if_null(replacement_year, maxint())) as Replacement_Year
       })
 ->
select({ { exposure.*, Replacement_Year, Retreat } as exposure }) as calc_replacement_year
 ->
# combine the current and future building sets and work out which buildings
# exist at any one time based on the Construction_Year/Replacement_Year
union() as possible_building_combinations
 ->
# exclude any future buildings that won't be built at all
filter(exposure.Construction_Year <= $max_year)
 ->
join(on: true) as join_exposures_and_events
 ->
# add in the Return Periods we're interested in
select({ *, $return_periods as Return_Period })
 ->
unnest(Return_Period)
 ->
# build a SLR=>loss curve for each ARI/return period.
# (the lambda has to sample the hazard coverage in order to calculate the loss)
select({
        *,
        create_continuous(
            $SLRs,
            x -> flood_building_impact(
              exposure,
              max(
                  map(
                      sample(exposure,
                             lookup(event_table, { int(x) as SLR, Return_Period }).coverage),
                      h -> h.sampled)
                 )
              )
          ) as loss_curve,
          1 - exp(0 - (1/float(Return_Period))) as Exceedance_Probability
       })
 ->
join(on: true) as join_cc_projections
 ->
select({
        *,
        create_continuous(
            # the assumption here is we will have projected SLR data-points for all these hard-coded years
            # in the cc_projection CSV file. We can then use them to interpolate to get the requested $years
            [2005, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110, 2120],
            x -> lookup(SLR_table, int(x))
          ) as SLR_curve
       })
 ->
# for each CC scenario, find any future buildings that have been constructed by now,
# but exclude any current buildings that have been replaced. That way we only have
# *either* the current or future building at any one given point in time
join(on: Year >= exposure.Construction_Year and Year < exposure.Replacement_Year) as join_years_of_interest
 ->
# the user-specified Year might not exactly match the cc_projection data.
# If that's the case we use interpolation to work out the SLR (rounded to nearest cm)
select({ *, round(apply_continuous(SLR_curve, Year)) as SLR })
 ->
# use interpolation to work out the impact/loss based on the projected SLR
select({ *, apply_continuous(loss_curve, SLR) as Impact }) as consequence_analysis
 ->
# throw away unexposed assets as quickly as possible
filter(Impact.Depth > $min_depth)
 ->
group(by: { Year, SLR, Return_Period, Exceedance_Probability },
      select: {
            *,
            count(*) as Buildings_Exposed,
            sum(exposure.Reinstatement_Cost) as Exposed_Value,
            round(mean(Impact.Depth), 2) as Average_Depth,
            round(mean(Impact.Damage_Ratio), 4) as Average_Damage_Ratio,
            round(sum(Impact.Reinstatement_Cost)) as Total_Reinstatement_Cost,
            round(sum(Impact.Life_Safety_Risk), 7) as Total_Life_Safety_Risk,
            round(sum(Impact.Displacement_Days)) as Total_Displacement_Days
      }) as event_impact
 ->
select({ *, round(Exceedance_Probability, 4) as Exceedance_Probability })
 ->
sort([Year, SLR, Return_Period])
 ->
save('event-impact-table', format: 'csv')

#
# AAL
#
event_impact
 ->
group(by: { Year, SLR },
      select: {
          *,
          ceil(  
            trapz(
                  fit_curve(
                      x-value: Exceedance_Probability,
                      y-value: Total_Reinstatement_Cost,
                  fitters: {'continuous'}
                 ).function,
                 a: min(Exceedance_Probability),
                 b: max(Exceedance_Probability),
                 intervals: 10000
                 )) as Reinstatement_Cost_AAL,

          round(
            trapz(
                  fit_curve(
                      x-value: Exceedance_Probability,
                      y-value: Total_Life_Safety_Risk,
                  fitters: {'continuous'}
                 ).function,
                 a: min(Exceedance_Probability),
                 b: max(Exceedance_Probability),
                 intervals: 10000
                 ), 7) as Life_Safety_Risk_AAL,

          round(
            trapz(
                  fit_curve(
                      x-value: Exceedance_Probability,
                      y-value: Total_Displacement_Days,
                  fitters: {'continuous'}
                 ).function,
                 a: min(Exceedance_Probability),
                 b: max(Exceedance_Probability),
                 intervals: 10000
                 ), 2) as Displacement_Days_AAL,
          max(Exposed_Value) as Exposed_Value
      }) as calculate_AAL
 ->
sort(Year)
 ->
save('average-loss', format: 'csv')

# summary of building development
consequence_analysis
 ->
# buildings are unique for each SLR/Year, but events get duplicated for SLRs.
# We're only interested in the buildings, so just use one arbitrary ARI
filter(Return_Period = 1000)
 ->
group(by: { Year, SLR },
      select: {
            *,
            count(*) as Total_Buildings,
            sum(exposure.Reinstatement_Cost) as Total_Value
      })
 ->
sort([Year, SLR])
 ->
save('development-over-time', format: 'csv')

# detailed debug for what buildings exist at various time-points
consequence_analysis
 ->
filter(switch(Year,
             default: false,
             cases: [{ in: [$snapshot_year1, $snapshot_year2, $snapshot_year3, $snapshot_year4],
                       return: true }]) or
       # also filter by the first/last years that we'll use in the AAL-change output
       Year = min($years) or Year = max($years))
 ->
# replace unexposed impacts with null so that they excluded from the
# aggregation and don't skew the mean
select({ *, if_then_else(Impact.Depth <= $min_depth, null_of('floating'), round(Impact.Depth, 2)) as Depth })
 ->
select({
         *,
         if_then_else(is_null(Depth), null_of('integer'), round(Impact.Reinstatement_Cost)) as Reinstatement_Cost,
         if_then_else(is_null(Depth), null_of('floating'), round(Impact.Life_Safety_Risk, 7)) as Life_Safety_Risk,
         if_then_else(is_null(Depth), null_of('integer'), round(Impact.Displacement_Days)) as Displacement_Days,
         if_then_else(is_null(Depth), null_of('integer'), Return_Period) as Return_Period
       })
 ->
# We can also summarize the losses at any one particular point in time.
# This might help show if particular buildings are contributing to the AAL
group(by: { exposure, Year, SLR },
      select: {
          *,
          ceil(  
            trapz(
                  fit_curve(
                      x-value: Exceedance_Probability,
                      # trapz doesn't like it if there's only null data present
                      y-value: if_null(Reinstatement_Cost, 0),
                  fitters: {'continuous'}
                 ).function,
                 a: min(Exceedance_Probability),
                 b: max(Exceedance_Probability),
                 intervals: 10000
                 )) as Reinstatement_Cost_AAL,

          round(
            trapz(
                  fit_curve(
                      x-value: Exceedance_Probability,
                      y-value: if_null(Life_Safety_Risk, 0.0),
                  fitters: {'continuous'}
                 ).function,
                 a: min(Exceedance_Probability),
                 b: max(Exceedance_Probability),
                 intervals: 10000
                 ), 7) as Life_Safety_Risk_AAL,

          round(
            trapz(
                  fit_curve(
                      x-value: Exceedance_Probability,
                      y-value: if_null(Displacement_Days, 0),
                  fitters: {'continuous'}
                 ).function,
                 a: min(Exceedance_Probability),
                 b: max(Exceedance_Probability),
                 intervals: 10000
                 ), 2) as Displacement_Days_AAL,
          count(Return_Period) as Number_Events,
          min(Return_Period) as First_ARI_Exposed,
          min(Depth) as Min_Depth,
          round(mean(Depth), 2) as Mean_Depth,
          max(Depth) as Max_Depth,
          min(Reinstatement_Cost) as Min_Reinstatement_Cost,
          round(mean(Reinstatement_Cost)) as Mean_Reinstatement_Cost,
          max(Reinstatement_Cost) as Max_Reinstatement_Cost,
          min(Life_Safety_Risk) as Min_Life_Safety_Risk,
          round(mean(Life_Safety_Risk), 7) as Mean_Life_Safety_Risk,
          max(Life_Safety_Risk) as Max_Life_Safety_Risk,
          min(Displacement_Days) as Min_Displacement_Days,
          round(mean(Displacement_Days), 2) as Mean_Displacement_Days,
          max(Displacement_Days) as Max_Displacement_Days

      }) as building_snapshots

building_snapshots -> filter(Year = $snapshot_year1) -> save('buildings-at-' + str($snapshot_year1), format: 'geojson')
building_snapshots -> filter(Year = $snapshot_year2) -> save('buildings-at-' + str($snapshot_year2), format: 'geojson')
building_snapshots -> filter(Year = $snapshot_year3) -> save('buildings-at-' + str($snapshot_year3), format: 'geojson')
building_snapshots -> filter(Year = $snapshot_year4) -> save('buildings-at-' + str($snapshot_year4), format: 'geojson')

#
# Produce a summary of the change in AAL over time.
# We use an aggregation layer here because the building footprints
# may have changed over time
building_snapshots
 ->
filter(Year = min($years) or Year = max($years))
 ->
select({ *, sample_one(exposure, to_coverage(bookmark($aggregation_layer))) as aggregated_shape }) as sample_aggregation
 ->
# bucket by year so we end up with a total AAL for each of the first and last years
group(by: { aggregated_shape as aggregated },
      select: {
        *,
        bucket(by: Year,
               pick: b -> b = Year,
               select: {
                 sum(Reinstatement_Cost_AAL) as Reinstatement_Cost,
                 sum(Life_Safety_Risk_AAL) as Life_Safety_Risk,
                 sum(Displacement_Days_AAL) as Displacement_Days,
                 sum(exposure.Reinstatement_Cost) as Total_Value_Exposed
               },
               buckets: { First_Year: min($years), Last_Year: max($years) }
           ) as AAL
      })
 ->
select({ *, (AAL.Last_Year - AAL.First_Year) as Change_In_AAL })
 ->
save('AAL-change', format: 'geojson')

# if retreat was used, add up the total cost of the retreat
possible_building_combinations
 ->
filter(exposure.Retreat and exposure.Replacement_Year <= max($years))
 ->
group({
      sum(exposure.Reinstatement_Cost) as Total_Cost,
      count(*) as Total_Buildings,
       bucket_range(
            pick: exposure.Replacement_Year,
            select: {
                sum(exposure.Reinstatement_Cost) as Total_Cost,
                count(*) as Number
            },
            range: $years,
            options: { add_bounds: false }) as For_Period
       })
 ->
save('retreat-costs')

